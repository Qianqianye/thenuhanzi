---
title: hanzimaker
---

<h1>
  hanzimaker
</h1>

  <div class="background-context">
  inspired by netizens and activists who were making new characters. Prior art, collected from "Li Wei & Zhu Hua (2019) Tranßcripting: playful subversion with
Chinese characters, International Journal of Multilingualism, 16:2, 145-161, DOI:
10.1080/14790718.2019.1575834"

  </div>
  <div class="background-context-images">

  <figure>
    <%= image_tag "niubi.jpg", :width => '100px'%>
  </figure>
  <figcaption>
    niubi, meaning awesome. uses "niu" 牛 character for cow, and B, english letter.
  </figcaption>
  <figure>
  <%= image_tag "shiwai.jpg", :width => '100px'%>
  </figure>
  <figcaption>
    shi wai, or "deadly person", referring to CY Leung during umbrella revolution.
    尸shi and Y letter.
  </figcaption>


  <figure>
    <%= image_tag "ta.jpg", :width => '100px'%>
  </figure>
  <figcaption>
    Ta, 他 and 她 alternative, third person non-binary.
  </figcaption>

  <figure>
    <%= image_tag "hk.jpg", :width => '100px'%>
  </figure>
  <figcaption>
    (a) Oppose China, Destabilize Hong Kong, (b) Thief/Seller of Hong Kong, and (c) Hong Kong
independence.
  </figcaption>
  </div>


  <h3>Radicals</h3>

<div class="parent-container">
    <div id="canvas-container">
      <canvas id="canvas"></canvas>
    </div>
    <div class="radicals radical-menu">
      <% data.radicals.each do |f| %>
      <div class="radical-svg">
        <pre><%= image_tag "svg/radical-#{f.id}.svg", :draggable => 'true'%></pre>
      </div>
        <div class="svg-definition">
          <%=h f.id %>, <%=h f.definition %>
        </div>
      <% end %>
    </div>
    <div id="images">
    </div>
</div>
<div id="download-link">
  <a href="" id="download-link-href"></a>
</div>

<script type="text/javascript">



/*
==============
section below deals with draggin onto the canvas
==============
*/


$(window).bind("load",function() {


  var canvas = new fabric.Canvas('canvas', {
    selection: false,
    height: 600,
    width: 600
    });


    drawGrid(canvas);


    function drawGrid(c) {
      const options = {
          distance: c.width/2,
          width: c.width,
          height: c.height,
          param: {
            stroke: "#ebebeb",
            strokeWidth: 2.5,
            selectable: false
          }
        },
        gridLen = options.width / options.distance;

      for (var i = 0; i < gridLen; i++) {
        var distance = i * options.distance,
          horizontal = new fabric.Line(
            [distance, 0, distance, options.width],
            options.param
          ),
          vertical = new fabric.Line(
            [0, distance, options.width, distance],
            options.param
          );
        c.add(horizontal);
        c.add(vertical);
        if (i % 4 === 0) {
          horizontal.set({ stroke: "#cccccc" });
          vertical.set({ stroke: "#cccccc" });
        }
      }
  }


  var textbox = new fabric.Textbox('Drag radicals on the right onto this canvas, double click me to type', {
    left:100,
    top: 100,
    width: 200,
    fontSize: 40
  });

  canvas.add(textbox).setActiveObject(textbox);

  var currentlyDragging;

  function handleDragStart(e) {
      [].forEach.call(images, function (img) {
          img.classList.remove('img_dragging');
      });
      console.log(e)

      this.classList.add('img_dragging');
      currentlyDragging = e.target;
  }

  function handleDragOver(e) {
      if (e.preventDefault) {
          e.preventDefault(); // Necessary. Allows us to drop.
      }
      e.dataTransfer.dropEffect = 'copy'; // See https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect
      return false;
  }

  function handleDragEnter(e) {
    console.log(e)
      // this / e.target is the current hover target.
      this.classList.add('over');
  }

  function handleDragLeave(e) {
      this.classList.remove('over'); // this / e.target is previous target element.
  }

  function handleDrop(e) {
      if (e.preventDefault) {
        e.preventDefault();
      }

      if (e.stopPropagation) {
          e.stopPropagation(); // stops the browser from redirecting.
      }

      console.log('event: ', e);
      var ext = currentlyDragging.src.substr(-3);
      if (ext === 'svg') {
        fabric.loadSVGFromURL(currentlyDragging.src, function(objects, options) {
          var svg = fabric.util.groupSVGElements(objects, options);
          svg.left = e.layerX;
          svg.top = e.layerY;
          canvas.add(svg);
        });
      } else {
         var newImage = new fabric.Image(currentlyDragging, {
            width: currentlyDragging.width,
            height: currentlyDragging.height,
            // Set the center of the new object based on the event coordinates relative
            // to the canvas container.
            left: e.layerX,
            top: e.layerY
        });
        canvas.add(newImage);
      }
      return false;
  }

  function handleDragEnd(e) {
      // this/e.target is the source node.
      [].forEach.call(images, function (img) {
          img.classList.remove('img_dragging');
      });
  }

  if (Modernizr.draganddrop) {
      // Browser supports HTML5 DnD.

      // Bind the event listeners for the image elements
      var images = document.querySelectorAll('img');
      var objects = document.querySelectorAll('#images object');
      [].forEach.call(images, function (img) {
          img.addEventListener('dragstart', handleDragStart, false);
          img.addEventListener('dragend', handleDragEnd, false);
      });
      [].forEach.call(objects, function (obj) {
          obj.addEventListener('dragstart', handleDragStart, false);
          obj.addEventListener('dragend', handleDragEnd, false);
      });
      // Bind the event listeners for the canvas
      var canvasContainer = document.getElementById('canvas-container');
      canvasContainer.addEventListener('dragenter', handleDragEnter, false);
      canvasContainer.addEventListener('dragover', handleDragOver, false);
      canvasContainer.addEventListener('dragleave', handleDragLeave, false);
      canvasContainer.addEventListener('drop', handleDrop, false);
    } else {
        // Replace with a fallback to a library solution.
        alert("This browser doesn't support the HTML5 Drag and Drop API.");
    }

    // $('img').mouseover(function(){
    //   $(".svg-definition").hide();
    //   $(".svg-definition").show();
    //   console.log('hi')
    // });



});


  /*
  ==============
  Below is commented out, it loads *all of the characters* as svg and each of them become draggable
  ==============
  */
  // var canvas = new fabric.Canvas('canvas');
  //
  // var rect = new fabric.Rect({
  //   left: 100,
  //   top: 50,
  //   width: 100,
  //   height: 100,
  //   fill: 'green',
  //   angle: 20,
  //   padding: 10
  // });
  // canvas.add(rect);
  //
  //
  // fabric.loadSVGFromURL('../assets/test-2-radicals.svg', function(objects, options) {
  //   // var loadedObject = fabric.util.groupSVGElements(objects, options);
  //   console.log(objects)
  //   objects.forEach((item, i) => {
  //     canvas.add(item);
  //   });
  //
  //   canvas.renderAll();
  //
  // });








var link = document.getElementById('download-link-href');
    link.innerHTML = 'download image';
    link.addEventListener('click', function(ev) {
    link.href = canvas.toDataURL();
    link.download = "my-new-hanzi.jpg";
}, false);

document.body.getElementById('download-link').appendChild(link);





</script>
