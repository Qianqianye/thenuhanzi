---
title: hanzimaker
---


<div class = "tittle">
  <h1>
  hanzimaker
  </h1>
</div>

  <div class="background-context">

  </div>
  <div class="background-context-images">


  </div>




<div class="parent-container">

    <div id="examples left">
      <h3>Examples</h3>
      <figure>
        <%= image_tag "niubi.jpg", :width => '50px'%>
      </figure>
      <figcaption>
        niubi, meaning awesome. uses "niu" 牛 character for cow, and B, english letter.
      </figcaption>
      <figure>
      <%= image_tag "shiwai.jpg", :width => '50px'%>
      </figure>
      <figcaption>
        shi wai, or "deadly person", referring to CY Leung during umbrella revolution.
        尸shi and Y letter.
      </figcaption>


      <figure>
        <%= image_tag "ta.jpg", :width => '50px'%>
      </figure>
      <figcaption>
        Ta, 他 and 她 alternative, third person non-binary.
      </figcaption>

      <figure>
        <%= image_tag "hk.jpg", :width => '50px'%>
      </figure>
      <figcaption>
        (a) Oppose China, Destabilize Hong Kong, (b) Thief/Seller of Hong Kong, and (c) Hong Kong
    independence.
      </figcaption>

      <figcaption>
          inspired by netizens and activists who were making new characters. Prior art, collected from "Li Wei & Zhu Hua (2019) Tranßcripting: playful subversion with
      Chinese characters, International Journal of Multilingualism, 16:2, 145-161, DOI:
      10.1080/14790718.2019.1575834"
      </figcaption>

    </div>

    <div id="center canvas">
      <div id="download-link">
        <a href="" id="download-link-href"></a>
      </div>
      <div id="clear canvas">
        <button onclick="clearAll()" id="clearAll"> Clear Canvas </button>
      </div>
      <div id="canvas-container">
        <canvas id="canvas"></canvas>
      </div>
      <div class="configuration-options">
          <div class="arrange">
            <button class="config-2-horizontal" onclick="horizontalTwo()">
               <img src="assets/images/icons/1.svg" class="arrange-svg">
            </button>
            <button class="config-2-horizontal" onclick="horizontalThree()">
              <img src="assets/images/icons/2.svg" class="arrange-svg">
            </button>
            <button class="config-2-horizontal" onclick="subDivideRight()">
              <img src="assets/images/icons/3.svg" class="arrange-svg">
            </button>
            <button class="config-2-horizontal" onclick="alert('config2horizontal')">
              <img src="assets/images/icons/4.svg" class="arrange-svg">
            </button>
            <button class="config-2-horizontal" onclick="alert('config2horizontal')">
              <img src="assets/images/icons/5.svg" class="arrange-svg">
            </button>
            <button class="config-2-horizontal" onclick="alert('config2horizontal')">
              <img src="assets/images/icons/6.svg" class="arrange-svg">
            </button>
            <button class="config-2-horizontal" onclick="alert('config2horizontal')">
              <img src="assets/images/icons/7.svg" class="arrange-svg">
            </button>
            <button class="config-2-horizontal" onclick="alert('config2horizontal')">
              <img src="assets/images/icons/8.svg" class="arrange-svg">
            </button>
          </div>
      </div>
    </div>

    <div class="radicals right">
      <h3>Radicals</h3>

      <div class="radical-menu-container">
        <div class="radicals radical-menu">
          <% data.radicals.group_by(&:category).each do |category, radicals| %>
            <div id="radical-group-heading">
              <%=category%>
            </div>
            <div class="radical-group-category">
            <%radicals.each do |f|%>

                <div class="radical-button">
                  <div class="radical-svg">
                      <%= image_tag "radicals/radical-#{f.id}.svg", :data=>"assets/images/radicals/radical-#{f.id}.svg", :class => 'radical-svg-link', :draggable => 'true'%>
                  </div>
                  <div class="svg-definition">
                    <%=link_to "#{f.id}, #{f.definition}","#", :relative => true, :data =>"assets/images/radicals/radical-#{f.id}.svg", :class => "radical-svg-link"%>
                  </div>
                </div>

                <%end%>
            </div>
            <%end%>

        </div>
      </div>

        <h3>Sensitive Words</h3>
          <div class="radicals word-menu">
            <% data.words.each do |word| %>
              <div class="word-button">
                  <div class="word-svg">
                    <%= image_tag "words/#{word.id}.svg", :data=>"assets/images/words/#{word.id}.svg", :class => 'word-svg', :draggable => 'true'%>
                  </div>
                  <div class="svg-definition-word">
                    <%=link_to "#{word.en}","#", :relative => true, :data =>"assets/images/words/#{word.id}.svg", :class => "radical-svg-link"%>
                  </div>
              </div>
              <% end %>

            </div>



        <div class="freeText">
          <label for="addText">Freetype</label>
          <input type="text" id="addText"  value="" />
          <button onclick="submitTextToCanvas()" id="testButton"> Add to Canvas </button>
        </div>

      </div>

  </div>



<script type="text/javascript">

function submitTextToCanvas(id) {
  var value = document.getElementById('addText').value;
  var textbox = new fabric.Textbox(value, {
    left:100,
    top: 100,
    width: 200,
    fontSize: 40
  });
  canvas.add(textbox).setActiveObject(textbox);
}

// $(window).bind("load",function() {

//prevent the page from scrolling up when clicking one of the buttons to add to canvas
  $('.radical-svg-link').click(function (event) {
       event.preventDefault();
  });

  var canvasHeight=600;
  var canvasWidth=600;

  var canvas = new fabric.Canvas('canvas', {
    selection: false,
    height: 600,
    width: 600
    });


//Adding the tianzige
    function drawGrid(c) {
      const options = {
          distance: c.width/4,
          width: c.width,
          height: c.height,
          param: {
            stroke: "#ebebeb",
            strokeWidth: 2.5,
            selectable: false
          }
        },
        gridLen = options.width / options.distance;

      for (var i = 0; i < gridLen; i++) {
        var distance = i * options.distance,
          horizontal = new fabric.Line(
            [distance, 0, distance, options.width],
            options.param
          ),
          vertical = new fabric.Line(
            [0, distance, options.width, distance],
            options.param
          );
        c.add(horizontal);
        c.add(vertical);
        if (i % 4 === 0) {
          horizontal.set({ stroke: "#cccccc" });
          vertical.set({ stroke: "#cccccc" });
        }
      }
  }


  drawGrid(canvas);


  var textbox = new fabric.Textbox('Click radicals on the right onto this canvas, double click me to type', {
    left:100,
    top: 100,
    width: 200,
    fontSize: 40
  });

  canvas.add(textbox).setActiveObject(textbox);

  var currentlyDragging;


  //Snap to Grid
  // var distance = canvas.width/8;
  //   canvas.on('object:moving', function(options) {
  //     w = options.target.width * options.target.scaleX,
  //     h = options.target.height * options.target.scaleY,
  //     options.target.set({
  //       right: Math.round((options.target.left + w) / distance) * distance,
  //       left: Math.round(options.target.left / distance) * distance,
  //       top: Math.round(options.target.top / distance) * distance
  //     });
  //   });

//Add to canvas

function add(e) {
  console.log(e.target.getAttribute('data'))
  var svgURL = e.target.getAttribute('data');
  fabric.loadSVGFromURL(svgURL, function(objects, options) {
    for(var i=0; i < objects.length; i++) {
        objects[i].scaleToWidth(canvasWidth/2);
        objects[i].scaleToHeight(canvasHeight/2);
       canvas.add(objects[i]);
    }
  });

  //commented out below is grouping SVG
  // fabric.loadSVGFromURL(svgURL, function(objects, options) {
  //     var svg = fabric.util.groupSVGElements(objects, options);
  //     // svg.left = e.layerX;
  //     // svg.top = e.layerY;
  //     svg.scaleToWidth(canvasWidth/2);
  //     svg.scaleToHeight(canvasHeight/2);
  //   canvas.add(svg);
  // });
}


var elements = document.getElementsByClassName("radical-svg-link");

for (var i = 0; i < elements.length; i++) {
    elements[i].addEventListener('click', add, false);
}


//Deleting all objects on canvas
function clearAll () {
  canvas.clear();
  drawGrid(canvas);
}


//Deleting active object

function deleteActiveObject() {
  var activeObject = canvas.getActiveObject();
  canvas.remove(activeObject);
}

$("#delete").click(deleteActiveObject);
$("body").on("keydown", function(e) {
  if (e.which == 8 || e.which == 46) {
    deleteActiveObject();
  }
});

var link = document.getElementById('download-link-href');
    link.innerHTML = 'download image';
    link.addEventListener('click', function(ev) {
    link.href = canvas.toDataURL();
    link.download = "my-new-hanzi.jpg";
}, false);

document.body.getElementById('download-link').appendChild(link);



//Autoconfig buttons
var specialRadicals = {
  'radical-1': 'left',
  'radical-2': 'whole'
}

function horizontalTwo(){
  var allObjects = canvas.getObjects();
  var objectsOnly = allObjects.slice(8, allObjects.length);
  if (objectsOnly.length < 3) {
    var radicalLeft = objectsOnly[0];
    var radicalRight = objectsOnly[1];

    //Scale to
    radicalLeft.scale((canvas.height/2.5)/radicalLeft.height);
    radicalRight.scale((canvas.height/2.5)/radicalRight.height);

    radicalLeft.left=(canvas.height/3)-(radicalLeft.width*4);
    radicalLeft.top=(canvas.height/3)-radicalLeft.height;
    radicalLeft.setCoords();

    radicalRight.left=radicalLeft.oCoords.tr.x + 3;
    radicalRight.top=radicalLeft.oCoords.tr.y;
    radicalRight.setCoords();

    canvas.renderAll();
  } else {
    alert('this configuration is for two radicals');
  }
}

function horizontalThree(){
  var allObjects = canvas.getObjects();
  var objectsOnly = allObjects.slice(8, allObjects.length);
  if (objectsOnly.length < 4) {
    var radicalLeft = objectsOnly[0];
    var radicalMiddle = objectsOnly[1];
    var radicalRight = objectsOnly[2];

    //Scale to smaller sizes
    radicalLeft.scale((canvas.height/4)/radicalLeft.height);
    radicalMiddle.scale((canvas.height/4)/radicalMiddle.height);
    radicalRight.scale((canvas.height/4)/radicalRight.height);

    radicalLeft.left=(canvas.height/3)-(radicalLeft.width*4);
    radicalLeft.top=(canvas.height/2.5)-radicalLeft.height;
    radicalLeft.setCoords();


    radicalMiddle.left = radicalLeft.oCoords.tr.x + 5;
    radicalMiddle.top=radicalLeft.oCoords.tr.y;
    radicalMiddle.setCoords();


    radicalRight.left=radicalMiddle.oCoords.tr.x + 5;
    radicalRight.top=radicalMiddle.oCoords.tr.y;
    radicalRight.setCoords();

    canvas.renderAll();
  } else {
    alert('this configuration is for three radicals');
  }
}

function subDivideRight(){
  var allObjects = canvas.getObjects();
  var objectsOnly = allObjects.slice(8, allObjects.length);
  if (objectsOnly.length < 4) {
    var radicalLeft = objectsOnly[0];
    var radicalRightTop = objectsOnly[1];
    var radicalRightBottom = objectsOnly[2];

    var radicalLeftScaleFactor = (canvas.height/2)/radicalLeft.height;
    //Scale to
    radicalLeft.scale(radicalLeftScaleFactor);

    radicalRightTop.scale((canvas.height/4)/radicalRightTop.height);
    radicalRightBottom.scale((canvas.height/4)/radicalRightTop.height);


    radicalLeft.left=(canvas.height/3)-(radicalLeft.width*4);
    radicalLeft.top=(canvas.height/3)-radicalLeft.height;
    radicalLeft.setCoords();

    radicalRightTop.left=radicalLeft.oCoords.tr.x + 3;
    radicalRightTop.top=radicalLeft.oCoords.tr.y;
    radicalRightTop.setCoords();

    radicalRightBottom.left=radicalRightTop.oCoords.bl.x + 3;
    radicalRightBottom.top=radicalRightTop.oCoords.bl.y;
    radicalRightBottom.setCoords();

    canvas.renderAll();

  } else {
    alert('this configuration is for two radicals');
  }
}




</script>
